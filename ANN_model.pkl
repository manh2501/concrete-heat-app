{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPYZjmpRuWnYGtthoBiOYJe"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UrUCfmp7yE8Z","executionInfo":{"status":"ok","timestamp":1757008326530,"user_tz":-420,"elapsed":8069,"user":{"displayName":"Manh lê","userId":"07364336168135775460"}},"outputId":"51b78ab5-bf06-4774-9f95-23a5aa74037c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: joblib in /usr/local/lib/python3.12/dist-packages (1.5.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.12/dist-packages (1.6.1)\n","Requirement already satisfied: numpy>=1.19.5 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (2.0.2)\n","Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (1.16.1)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.12/dist-packages (from scikit-learn) (3.6.0)\n","Sai số huấn luyện MSE = 0.003383\n",">>> Đã lưu ANN_model.pkl (gồm model + scalerX + scalerY)\n"]}],"source":["# ============================\n","# 0. Cài thư viện cần thiết\n","# ============================\n","!pip install joblib scikit-learn\n","\n","# ============================\n","# 1. Import\n","# ============================\n","import numpy as np\n","from sklearn.neural_network import MLPRegressor\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import mean_squared_error\n","import joblib\n","\n","# ============================\n","# 2. Sinh dữ liệu giống MATLAB\n","# ============================\n","nSample = 500\n","rho, c, Hc = 2400, 0.84, 250\n","E, ft, alpha_T = 40000, 4.0, 1e-5\n","\n","B = 2 + (30-2)*np.random.rand(nSample)\n","L = 2 + (30-2)*np.random.rand(nSample)\n","H = 2 + (7-2)*np.random.rand(nSample)\n","\n","H_top, H_bot = H/5, 4*H/5\n","V_top = B*L*H_top\n","V_bot = B*L*H_bot\n","V_total = V_top + V_bot\n","\n","C_top = 370 + (450-370)*np.random.rand(nSample)\n","C_bot = 300 + (360-300)*np.random.rand(nSample)\n","\n","T_env  = 15 + (35-15)*np.random.rand(nSample)\n","T_init = 15 + (30-15)*np.random.rand(nSample)\n","T_form = 20 + (50-20)*np.random.rand(nSample)\n","\n","# Tmax\n","Q_top = Hc * C_top * V_top\n","Q_bot = Hc * C_bot * V_bot\n","Q_total = Q_top + Q_bot\n","Tmax_center = T_init + Q_total / (rho * c * V_total)\n","\n","# ΔT\n","S = 2*(B*H + B*L + H*L)\n","VS = V_total / S\n","C_avg = (C_top + C_bot)/2\n","alpha, gamma, beta = 25, 0.1, 1.2\n","DeltaT_surface = alpha * VS * (C_avg/350) + gamma*(T_env - T_form)\n","DeltaT_corner = beta * DeltaT_surface\n","\n","# CI\n","sigma_th = E * alpha_T * DeltaT_surface\n","CI = ft / sigma_th\n","\n","# Noise\n","noise_level = 0.0005\n","Tmax_center    *= (1 + noise_level*np.random.randn(nSample))\n","DeltaT_surface *= (1 + noise_level*np.random.randn(nSample))\n","DeltaT_corner  *= (1 + noise_level*np.random.randn(nSample))\n","CI             *= (1 + noise_level*np.random.randn(nSample))\n","\n","# Dữ liệu train\n","X = np.vstack([B, H, L, C_top, C_bot, T_env, T_init, T_form]).T\n","Y = np.vstack([Tmax_center, DeltaT_surface, DeltaT_corner, CI]).T\n","\n","# ============================\n","# 3. Chuẩn hóa dữ liệu\n","# ============================\n","scalerX = StandardScaler()\n","scalerY = StandardScaler()\n","X_scaled = scalerX.fit_transform(X)\n","Y_scaled = scalerY.fit_transform(Y)\n","\n","# ============================\n","# 4. Train ANN\n","# ============================\n","model = MLPRegressor(\n","    hidden_layer_sizes=(12,8),\n","    solver='lbfgs',       # tốt cho dataset nhỏ\n","    max_iter=20000,\n","    tol=1e-6,\n","    random_state=42\n",")\n","model.fit(X_scaled, Y_scaled)\n","\n","# ============================\n","# 5. Đánh giá sai số\n","# ============================\n","Y_pred = model.predict(X_scaled)\n","MSE = mean_squared_error(Y_scaled, Y_pred)\n","print(f\"Sai số huấn luyện MSE = {MSE:.6f}\")\n","\n","# ============================\n","# 6. Lưu mô hình + scaler\n","# ============================\n","joblib.dump({\"model\": model, \"scalerX\": scalerX, \"scalerY\": scalerY}, \"ANN_model.pkl\")\n","print(\">>> Đã lưu ANN_model.pkl (gồm model + scalerX + scalerY)\")\n","\n"]}]}